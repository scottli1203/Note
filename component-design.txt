React 组件的三种创建方式
1， 无状态的函数式组件
无状态的函数式组件是从react0.14版开始出现的，主要的目的就是为了创建纯展示组件，这种组件只负责更具传入的props 来展示，不涉及到state状态的操作。
在大部分React代码中，大多数组件被写成无状态的组件，通过简单组合可以构建成其他的组件等；这种通过多个简单然后合并成一个大应用的设计模式被提倡（官方原话）。一下是两种创建纯函数组件的方式
function PrintName(props){
    return <div>{props.name}</div>
}

const PrintName = props => {
    return <div>{props.name}</div>
}

1. 组件不会被实例化，整体渲染性能得到提升 因为组件被精简成一个render方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实例化过程也就不需要分配多余的内存，从而性能得到一定的提升。
2. 组件不能访问this对象 无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如：this.ref、this.state等均不能访问。若想访问就不能使用这种形式来创建组件
3. 组件无法访问生命周期的方法 因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。
4. 无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用
5. 代码的可读性好，减少大量冗余的代码
       因为我们可以通过简单的组合大多数无状态的函数式组件构建其他复杂的组件。
2，React.createClass是react刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件，其形式如下：
Var myComponent = React.createClass({
    // 其他各种生命周期方法
    render:function(){
        Return <div>Hello World</div>
    }
})
这种方式创建的组件是有状态的组件，而且也需要被实例化的，并且可以访问组件的生命周期方法。但是随着react的发展，其自身的问题都暴露出来了。
* React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。
   React.createClass的mixins不够自然、直观；（这个后续可以开章节深入的讲）

React.Component
React.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；
React.componennt和React.createClass({})的主要不同在于
函数this自绑定
React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置(正因为这点，会增加很多没有必要的性能消耗)
const Contacts = React.createClass({  
  handleClick() {
    console.log(this); // React Component instance
  },
  render() {
    return (
      <div onClick={this.handleClick}></div>
    );
  }
});

React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。

class Contacts extends React.Component {  
  constructor(props) {
    super(props);
  }
  handleClick() {
    console.log(this); // null
  }
  render() {
    return (
      <div onClick={this.handleClick}></div>
    );
  }

React.Component有三种手动绑定方法
1， 在构造函数中绑定
constructor(props) {
       super(props);
       this.handleClick = this.handleClick.bind(this); //构造函数中绑定
  }
2， 使用函数的bind的方法
<div onClick={this.handleClick.bind(this)}></div>
3，使用箭头函数来绑定
<div onClick={()=>this.handleClick()}></div>

组件属性类型propTypes及其默认props属性defaultProps配置不同
const TodoItem = React.createClass({
    propTypes: { // as an object
        name: React.PropTypes.string
    },
    getDefaultProps(){   // return a object
        return {
            name: ''    
        }
    }
    render(){
        return <div></div>
    }
})

class TodoItem extends React.Component {
    static propTypes = {//类的静态属性
        name: React.PropTypes.string
    };

    static defaultProps = {//类的静态属性
        name: ''
    };

    ...
}

组件初始状态state的配置不同
const TodoItem = React.createClass({
    // return an object
    getInitialState(){ 
        return {
            isEditing: false
        }
    }
    render(){
        return <div></div>
    }
})

class TodoItem extends React.Component{
    constructor(props){
        super(props);
        this.state = { 
            isEditing: false
        } 
    }
    render(){
        return <div></div>
    }
}

创建组件的原则：
1，只要有可能，尽量使用无状态组件创建形式。
2，否则（如需要state、生命周期方法等），使用`React.Component`这种es6形式创建组件
因为React团队已经声明React.createClass最终会被React.Component的类形式所取代

http://www.cnblogs.com/wonyun/p/5930333.html


组件的通用设计
1， 高价组件
定义： 简单一点就是参数和返回值React 组件的函数。
使用场景：一般给组件添加比较通用的功能的时候用。

总结一点：
如果通用的功能涉及到组件的生命周期方法或者state的时候，我们可以用高阶组件。
否则，可以用纯函数组件来实现通用方法。

2，容器组件
主要是用来获取数据，状态管理，直接和redux 通讯到组件，通常也是所有子组件的公共祖先组件。
建议我们在设计的时候，可以有以下两种方案
1，子组件发生涉及到状态改变的action时，我们可以通过props 属性，一层层向上传递，最终由父组件向redux 派发action。这样做有一个好处是，我们可以通过父节点，看到整个页面的业务逻辑，但是弊端就是我们要将action 一层层的传到父节点，如果组件嵌套很深的话，会多很多传递action的方法。
2，子节点自己想redux派发action。这种方法可以避免写很多传递action的代码，但弊端是，会使父节点无法追踪子节点发生了什么。
开发过程中，根据实际情况来选择两者中的某一种。

3，组件本身的定义(这里主要将通用组件的设计)
设计一个通用组件的时候，我们可以通过组件的属性，来让组件展现出不同的状态，比如说我们定义一个盒子组件，向外报漏一个color 属性，外界可以传递调用<Box color=‘red’/> 来获取一个红色的盒子，也可以传递任何颜色值获取相应颜色的box
class Box extends {
    render(){
       return <div>{this.props.color}</div>
    }
}

当然，也可以保留一个getInfo的方法，来获取box的相应信息,其他组件可以通过调用<Box color=‘red’ getBoxInfo={this.getBoxInfo}/> 来获取box 的信息。

class Box extends {
    getBoxInfo(){
        let color = this.props.color;
        let info = '我是一个 ' + color + ' 盒子';
        this.props.getBoxInfo(info);
    }

    render(){
       return <div>{this.props.color}</div>
    }
}
在实际开发中，可以通过这种方式来定义通用的组件。

 




