React 组件就像一个能展现用户界面的状态机一样。用户的每个动作都可能触发状态机的变化，从而渲染不同的用户界面。一个state 对应一个view，反过来，一个view也对应唯一的一个state.所以，开发一个React应用, 本质上就是在管理各种组件的状态（state）。
获取state里面的数据： this.state
设置state的值：this.setState({})

组件中用到的一个变量是不是应该作为组件State，可以通过下面的4条依据进行判断：
1. 这个变量是否是通过Props从父组件中获取？如果是，那么它不是一个状态。
2. 这个变量是否在组件的整个生命周期中都保持不变？如果是，那么它不是一个状态。
3. 这个变量是否可以通过其他状态（State）或者属性(Props)计算得到？如果是，那么它不是一个状态。
4. 这个变量是否在组件的render方法中使用？如果不是，那么它不是一个状态。这种情况下，这个变量更适合定义为组件的一个普通属性，例如组件中用到的定时器，就应该直接定义为this.timer，而不是this.state.timer。
从上可以总结出来就是两点
1， 能够根据state中其他数据或者props计算出来的，不要保存在state中
2,   在组件整个生命周期中不变的数据，不要保存在state中。
正确的使用state
1.不能直接修改State, 而是通过this.setState()方法来修改state
2,State 的更新是异步的。调用setState，组件的state并不会立即改变，setState只是把要修改的状态放入一个队列中，React会优化真正的执行时机，并且React会出于性能原因，可能会将多次setState的状态修改合并成一次状态修改
3.State 的更新是一个浅合并（Shallow Merge）的过程, 只会改变你最终设置到state中的值，原本在state中 的值是不会改变的。

哪些组件更合适拥有state
1, 对于一个单独的组件，可以拥有自己的state. 例如一些组件库里面的组件。
2, 子组件不要有state, 应该把state 放在所有子组件公共的祖先组件里面，子组件的数据通过props的方式获取，也就是通常所有的从上到下的单向数据流。
总结一个原则：
当存在多个组件共同依赖一个状态时，一般的做法是状态上移，将这个状态放到这几个组件的公共父组件中

以上的用法都是单独的组件的使用，当我们要开发一个应用时，肯定需要大量的交互式操作。那么我们肯定需要对这些交互行为做一些控制，来实现我们对state的管理。
先看看一个例子：
MVC模式：主要讲的是在开发交互应用时，怎样将不同功能的代码拆分到不通的
文件或区块，以便降低代码的耦合度，提高代码的可读性和健壮性。简单的理解就是：
要将Model-View-Controller这三个部分拆分到不同的文件中。
Model: 业务数据模型及相关的操作模块。
View: 用户交互界面及相关的操作模块。
Controller：相应或者转发用户的请求的模块
整个服务器端端mvc 流程就是 controller 响应用户的请求，将数据和模版绑定在一起，最终形成页面呈现给用户。

当然，后续前端也引入了mvc的开发模式，但对于react， Facebook推出了一种flux的模式，将用户的操作集中处理在action中，用户界面的数据保存在store中，通过dispatcher 来转发action, store 根据不同的action来修改保存的数据，最终体现在view的变化。
flux, reflux, redux, mobx 都是基于flux 思想开发而来的状态管理的框架。这里我们只讲当前最流行的redux.


http://www.360doc.com/content/16/0816/12/18764023_583596474.shtml